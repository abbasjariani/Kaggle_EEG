#Monocle2 data object from each condition
dCellData_glu12h <- dCellData[,pd_df$timepoint=='glu12h']
dCellData_inlag1h <- dCellData[,pd_df$timepoint=='inlag1h']
dCellData_inlag3h <- dCellData[,pd_df$timepoint=='inlag3h']
#Monocle2 data object from each condition
dCellData_glu12h <- dCellData[,pd_df$timepoint=='glu12h']
dCellData_inlag1h <- dCellData[,pd_df$timepoint=='inlag1h']
dCellData_inlag3h <- dCellData[,pd_df$timepoint=='inlag3h']
###############
dCellData_glu12h <- estimateSizeFactors(dCellData_glu12h)
#the line below is required for negbinom dispersion
dCellData_glu12h <- estimateDispersions(dCellData_glu12h)
dCellData_glu12h <- setOrderingFilter(dCellData_glu12h, gene_ids4_ptempor)
dCellData_glu12h <- reduceDimension(dCellData_glu12h)
dCellData_glu12h <- suppressWarnings(orderCells(dCellData_glu12h))
plot_cell_trajectory(dCellData_glu12h,color_by = 'Pseudotime', cell_size = 0.8)
dCellData_inlag1h <- estimateSizeFactors(dCellData_inlag1h)
#the line below is required for negbinom dispersion
dCellData_inlag1h <- estimateDispersions(dCellData_inlag1h)
dCellData_inlag1h <- setOrderingFilter(dCellData_inlag1h, gene_ids4_ptempor)
dCellData_inlag1h <- reduceDimension(dCellData_inlag1h)
dCellData_inlag1h <- suppressWarnings(orderCells(dCellData_inlag1h))
plot_cell_trajectory(dCellData_inlag1h,color_by = 'Pseudotime', cell_size = 0.8)
###############
dCellData_inlag3h <- estimateSizeFactors(dCellData_inlag3h)
#the line below is required for negbinom dispersion
dCellData_inlag3h <- estimateDispersions(dCellData_inlag3h)
dCellData_inlag3h <- setOrderingFilter(dCellData_inlag3h, gene_ids4_ptempor)
dCellData_inlag3h <- reduceDimension(dCellData_inlag3h)
dCellData_inlag3h <- suppressWarnings(orderCells(dCellData_inlag3h))
plot_cell_trajectory(dCellData_inlag3h,color_by = 'Pseudotime', cell_size = 0.8)
#####################################
dCellData_inlag1h <- estimateSizeFactors(dCellData_inlag1h)
#the line below is required for negbinom dispersion
dCellData_inlag1h <- estimateDispersions(dCellData_inlag1h)
dCellData_inlag1h <- setOrderingFilter(dCellData_inlag1h, gene_ids4_ptempor)
dCellData_inlag1h <- reduceDimension(dCellData_inlag1h)
dCellData_inlag1h <- suppressWarnings(orderCells(dCellData_inlag1h))
plot_cell_trajectory(dCellData_inlag1h,color_by = 'Pseudotime', cell_size = 0.8)
plot_cell_trajectory(dCellData_inlag1h,color_by = 'State', cell_size = 0.8)
pData(dCellData_inlag1h)
plot_cell_trajectory(dCellData_inlag3h,color_by = 'State', cell_size = 0.8)
plot_cell_trajectory(dCellData_inlag1h,color_by = 'State', cell_size = 0.8)
plot_cell_trajectory(dCellData_inlag3h,color_by = 'Pseudotime', cell_size = 0.8)+ scale_fill_brewer(palette="Paired")
plot_cell_trajectory(dCellData_inlag3h,color_by = 'State', cell_size = 0.8)+ scale_fill_brewer(palette="Paired")
plot_cell_trajectory(dCellData_inlag3h,color_by = 'State', cell_size = 0.8)+ scale_color_brewer(palette="Paired")
plot_cell_trajectory(dCellData_inlag1h,color_by = 'State', cell_size = 0.8)+ scale_color_brewer(palette="Paired")
pd_1hlag <- pData(dCellData_inlag1h)
pd_3hlag <- pData(dCellData_inlag3h)
head(pd_1hlag)
pd_1hlag[pd_1hlag$State==9,"barcode"]
bcs_1hlag_state8 <- pd_1hlag[pd_1hlag$State==8,"barcode"]
dCellData_glu12h <- estimateSizeFactors(dCellData_glu12h)
#the line below is required for negbinom dispersion
dCellData_glu12h <- estimateDispersions(dCellData_glu12h)
dCellData_glu12h <- setOrderingFilter(dCellData_glu12h, gene_ids4_ptempor)
dCellData_glu12h <- reduceDimension(dCellData_glu12h)
dCellData_glu12h <- suppressWarnings(orderCells(dCellData_glu12h))
head(pd_1hlag)
pd_12hglu <- pData(dCellData_glu12h)
############3
#Example data input
pd_1 = pd_1hlag
pd_2 = pd_1hlag
dCellData_1 = dCellData_inlag1h
dCellData_2 = dCellData_inlag1h
states1 = 8
states2 = 9
######################
bcs_cond1_states1 <- pd_1[pd_1$State%in%states1,"barcode"]
bcs_cond2_states2 <- pd_2[pd_2$State%in%states2,"barcode"]
bcs_cond2_states2
pd_meged <- pData(dCellData)
dCellData[,pd_meged$barcode%in%bcs_cond1_states1]
dCellData[,pd_meged$barcode%in%bcs_cond1_states1 | pd_meged$barcode%in%bcs_cond2_states2]
dCellData_1_2 <- dCellData[,pd_meged$barcode%in%bcs_cond1_states1 | pd_meged$barcode%in%bcs_cond2_states2]
pd_1_2 <- pData(dCellData_1_2)
head(pd_1_2)
pd_1_2$comparison_cond <- -1
pd_1_2[pd_1_2$barcode%in%bcs_cond1_states1,"comparison_cond"] <- 1
pData(dCellData_1_2) <- pd_1_2
dCellData_1_2 <- dCellData[,pd_meged$barcode%in%bcs_cond1_states1 | pd_meged$barcode%in%bcs_cond2_states2]
pd_1_2 <- pData(dCellData_1_2)
pd_1_2$comparison_cond <- -1
pd_1_2[pd_1_2$barcode%in%bcs_cond1_states1,"comparison_cond"] <- 1
pd_1_2[pd_1_2$barcode%in%bcs_cond2_states2,"comparison_cond"] <- 2
pData(dCellData_1_2) <- pd_1_2
pData(dCellData_1_2)
?differentialGeneTest
cur_diff_test_res <- differentialGeneTest(dCellData_1_2, fullModelFormulaStr = "~comparison_cond",cores=5)
cur_diff_test_res
cur_diff_test_res[cur_diff_test_res$pval< 0.01,'gene_short_name']
pop_exprs_cond_state_1 <- rowSums(exprs(dCellData[,pd_meged$barcode%in%bcs_cond1_states1 ]))
pop_exprs_cond_state_1
pop_exprs_cond_state_1 <- rowSums(exprs(dCellData[,pd_meged$barcode%in%bcs_cond1_states1 ]))
pop_exprs_cond_state_2 <- rowSums(exprs(dCellData[,pd_meged$barcode%in%bcs_cond1_states2 ]))
pop_exprs_cond_state_1 <- rowSums(exprs(dCellData[,pd_meged$barcode%in%bcs_cond1_states1 ]))
pop_exprs_cond_state_2 <- rowSums(exprs(dCellData[,pd_meged$barcode%in%bcs_cond2_states2 ]))
log2rat_2_to_1 <- log2((pop_exprs_cond_state_1+1) / (pop_exprs_cond_state_2+1))
log2rat_2_to_1 <- data.frame(keyName = names(log2rat_2_to_1), value = log2rat_2_to_1, row.names = NULL)
head(log2rat_2_to_1)
hist(log2rat_2_to_1)
hist(log2rat_2_to_1$value)
head(cur_diff_test_res)
colnames(cur_diff_test_res)[which(names(cur_diff_test_res) == "id")] <- "Gene.ID"
head(cur_diff_test_res)
pop_exprs_cond_state_1 <- rowSums(exprs(dCellData[,pd_meged$barcode%in%bcs_cond1_states1 ]))
pop_exprs_cond_state_2 <- rowSums(exprs(dCellData[,pd_meged$barcode%in%bcs_cond2_states2 ]))
log2rat_2_to_1 <- log2((pop_exprs_cond_state_1+1) / (pop_exprs_cond_state_2+1))
log2rat_2_to_1 <- data.frame(keyName = names(log2rat_2_to_1), value = log2rat_2_to_1, row.names = NULL)
colnames(log2rat_2_to_1) <- c("Gene.ID","log2rat_2_to_1")
head(log2rat_2_to_1)
cur_diff_test_res <- merge(cur_diff_test_res,log2rat_2_to_1)
head(cur_diff_test_res)
write.csv(cur_diff_test_res[cur_diff_test_res$pval<0.01 & cur_diff_test_res$log2rat_2_to_1 > 0, "Gene.ID"])
write.csv(cur_diff_test_res[cur_diff_test_res$pval<0.01 & cur_diff_test_res$log2rat_2_to_1 > 0, "Gene.ID"], row.names = FALSE)
write.csv(cur_diff_test_res[cur_diff_test_res$pval<0.01 & cur_diff_test_res$log2rat_2_to_1 < 0, "Gene.ID"], row.names = FALSE, col.names = FALSE)
gene_ids4_ptempor <- diff_test_res_timepoints[(diff_test_res_timepoints$log2_3hlag_to_1hlag>2 | diff_test_res_timepoints$log2_1hlag_to_12hglu>2)&(diff_test_res_timepoints$pval<0.0001),"Gene.ID"]
#Monocle2 data object from each condition
dCellData_glu12h <- dCellData[,pd_df$timepoint=='glu12h']
dCellData_inlag1h <- dCellData[,pd_df$timepoint=='inlag1h']
dCellData_inlag3h <- dCellData[,pd_df$timepoint=='inlag3h']
###############################
###############
dCellData_glu12h <- estimateSizeFactors(dCellData_glu12h)
#the line below is required for negbinom dispersion
dCellData_glu12h <- estimateDispersions(dCellData_glu12h)
dCellData_glu12h <- setOrderingFilter(dCellData_glu12h, gene_ids4_ptempor)
dCellData_glu12h <- reduceDimension(dCellData_glu12h)
dCellData_glu12h <- suppressWarnings(orderCells(dCellData_glu12h))
#plot_cell_trajectory(dCellData_glu12h,color_by = 'Pseudotime', cell_size = 0.8)
#plot_cell_trajectory(dCellData_glu12h,color_by = 'State', cell_size = 0.8)+ scale_color_brewer(palette="Paired")
###############
dCellData_inlag3h <- estimateSizeFactors(dCellData_inlag3h)
#the line below is required for negbinom dispersion
dCellData_inlag3h <- estimateDispersions(dCellData_inlag3h)
dCellData_inlag3h <- setOrderingFilter(dCellData_inlag3h, gene_ids4_ptempor)
dCellData_inlag3h <- reduceDimension(dCellData_inlag3h)
dCellData_inlag3h <- suppressWarnings(orderCells(dCellData_inlag3h))
plot_cell_trajectory(dCellData_inlag3h,color_by = 'Pseudotime', cell_size = 0.8)
plot_cell_trajectory(dCellData_inlag3h,color_by = 'State', cell_size = 0.8)+ scale_color_brewer(palette="Paired")
#####################################
dCellData_inlag1h <- estimateSizeFactors(dCellData_inlag1h)
#the line below is required for negbinom dispersion
dCellData_inlag1h <- estimateDispersions(dCellData_inlag1h)
dCellData_inlag1h <- setOrderingFilter(dCellData_inlag1h, gene_ids4_ptempor)
dCellData_inlag1h <- reduceDimension(dCellData_inlag1h)
dCellData_inlag1h <- suppressWarnings(orderCells(dCellData_inlag1h))
plot_cell_trajectory(dCellData_inlag1h,color_by = 'Pseudotime', cell_size = 0.8)
plot_cell_trajectory(dCellData_inlag1h,color_by = 'State', cell_size = 0.8)+ scale_color_brewer(palette="Paired")
##################################
?differentialGeneTest
?p.adjust
pd.adjust(cur_diff_test_res$pval,method = "bonferroni")
p.adjust(cur_diff_test_res$pval,method = "bonferroni")
hist(p.adjust(cur_diff_test_res$pval,method = "bonferroni"))
hist(p.adjust(cur_diff_test_res$pval,method = "bonferroni"))
cur_diff_test_res$pval_adj <- p.adjust(cur_diff_test_res$pval,method = "bonferroni")
head(cur_diff_test_res)
cur_diff_test_res[with(cur_diff_test_res, order(pval_adj)), ]
head(cur_diff_test_res[with(cur_diff_test_res, order(pval_adj)), ])
difftest_states_conds <- function(pd_1, pd_2, dCellData_1, dCellData_2, states1, states2){
#states could be a vector of state numbers
#pd_1 is pData of condition one with all the states
#dCellData_1 is monocle2 format data object of condition one with all its states
############3
#Example data input
pd_1 = pd_1hlag
pd_2 = pd_1hlag
dCellData_1 = dCellData_inlag1h
dCellData_2 = dCellData_inlag1h
states1 = 8
states2 = 9
######################
bcs_cond1_states1 <- pd_1[pd_1$State%in%states1,"barcode"]
bcs_cond2_states2 <- pd_2[pd_2$State%in%states2,"barcode"]
##################
#Constructing a new dCellData object containing only the selected conditions
#Adding a new variable to pData of the new dCellData so we do statistical test
dCellData_1_2 <- dCellData[,pd_meged$barcode%in%bcs_cond1_states1 | pd_meged$barcode%in%bcs_cond2_states2]
pd_1_2 <- pData(dCellData_1_2)
pd_1_2$comparison_cond <- -1
pd_1_2[pd_1_2$barcode%in%bcs_cond1_states1,"comparison_cond"] <- 1
pd_1_2[pd_1_2$barcode%in%bcs_cond2_states2,"comparison_cond"] <- 2
pData(dCellData_1_2) <- pd_1_2
#########################
#statistical test
cur_diff_test_res <- differentialGeneTest(dCellData_1_2, fullModelFormulaStr = "~comparison_cond",cores=5)
colnames(cur_diff_test_res)[which(names(cur_diff_test_res) == "id")] <- "Gene.ID"
#calculating log2 ratios between conditions
pop_exprs_cond_state_1 <- rowSums(exprs(dCellData[,pd_meged$barcode%in%bcs_cond1_states1 ]))
pop_exprs_cond_state_2 <- rowSums(exprs(dCellData[,pd_meged$barcode%in%bcs_cond2_states2 ]))
log2rat_2_to_1 <- log2((pop_exprs_cond_state_1+1) / (pop_exprs_cond_state_2+1))
log2rat_2_to_1 <- data.frame(keyName = names(log2rat_2_to_1), value = log2rat_2_to_1, row.names = NULL)
colnames(log2rat_2_to_1) <- c("Gene.ID","log2rat_2_to_1")
#merging log2 ratio data to diff test results
cur_diff_test_res <- merge(cur_diff_test_res,log2rat_2_to_1)
#adjusting p-values
cur_diff_test_res$pval_adj <- p.adjust(cur_diff_test_res$pval,method = "bonferroni")
cur_diff_test_res[with(cur_diff_test_res, order(pval_adj)), ]
####################
return(cur_diff_test_res)
}
cur_diff_test_res <- cur_diff_test_res[with(cur_diff_test_res, order(pval_adj)), ]
head(cur_diff_test_res)
cur_diff_test_res[cur_diff_test_res$log2rat_2_to_1>0,]
cur_diff_test_res[cur_diff_test_res$log2rat_2_to_1>0,'gene_short_name']
cur_diff_test_res[cur_diff_test_res$pval_adj < 0.5 & cur_diff_test_res$log2rat_2_to_1>0,'gene_short_name']
dCellData_1
dCellData_1
head(pd_1[pd_1$State%in%states1,])
unique(pd_1[pd_1$State%in%states1,'timepoint'])
cond1_name <- unique(pd_1[,'timepoint'])
cond2_name <- unique(pd_2[,'timepoint'])
as.char(states1)
as.character(states1)
states1 = c(7,8)
pd_1 = pd_1hlag
pd_2 = pd_1hlag
dCellData_1 = dCellData_inlag1h
dCellData_2 = dCellData_inlag1h
states1 = c(7,8)
states2 = 9
######################
bcs_cond1_states1 <- pd_1[pd_1$State%in%states1,"barcode"]
bcs_cond2_states2 <- pd_2[pd_2$State%in%states2,"barcode"]
######################
#extracting condition-state info as string
cond1_name <- unique(pd_1[,'timepoint'])
cond2_name <- unique(pd_2[,'timepoint'])
#cond_states_1_name <- paste(cond1_name,as.character(states1))
##################
#Constructing a new dCellData object containing only the selected conditions
#Adding a new variable to pData of the new dCellData so we do statistical test
dCellData_1_2 <- dCellData[,pd_meged$barcode%in%bcs_cond1_states1 | pd_meged$barcode%in%bcs_cond2_states2]
pd_1_2 <- pData(dCellData_1_2)
pd_1_2$comparison_cond <- -1
pd_1_2[pd_1_2$barcode%in%bcs_cond1_states1,"comparison_cond"] <- 1
pd_1_2[pd_1_2$barcode%in%bcs_cond2_states2,"comparison_cond"] <- 2
pData(dCellData_1_2) <- pd_1_2
#########################
#statistical test
cur_diff_test_res <- differentialGeneTest(dCellData_1_2, fullModelFormulaStr = "~comparison_cond",cores=5)
colnames(cur_diff_test_res)[which(names(cur_diff_test_res) == "id")] <- "Gene.ID"
#calculating log2 ratios between conditions
pop_exprs_cond_state_1 <- rowSums(exprs(dCellData[,pd_meged$barcode%in%bcs_cond1_states1 ]))
pop_exprs_cond_state_2 <- rowSums(exprs(dCellData[,pd_meged$barcode%in%bcs_cond2_states2 ]))
log2rat_2_to_1 <- log2((pop_exprs_cond_state_1+1) / (pop_exprs_cond_state_2+1))
log2rat_2_to_1 <- data.frame(keyName = names(log2rat_2_to_1), value = log2rat_2_to_1, row.names = NULL)
colnames(log2rat_2_to_1) <- c("Gene.ID","log2rat_2_to_1")
#merging log2 ratio data to diff test results
cur_diff_test_res <- merge(cur_diff_test_res,log2rat_2_to_1)
#adjusting p-values
cur_diff_test_res$pval_adj <- p.adjust(cur_diff_test_res$pval,method = "bonferroni")
cur_diff_test_res <-cur_diff_test_res[with(cur_diff_test_res, order(pval_adj)), ]
#cur_diff_test_res[cur_diff_test_res$pval_adj < 0.5 & cur_diff_test_res$log2rat_2_to_1>0,'gene_short_name']
####################
head(cur_diff_test_res)
as.character(states1)
paste(cond1_name,as.character(states1),sep = '_')
paste(as.character(states1),sep = '_')
paste(states1,sep = '_')
paste(states1,sep = '_')
states1
paste(as.character(states1),sep = '_')
paste(as.factor(states1),sep = '_')
states1
paste(states1, collapse = '')
paste(states1, collapse = '_')
paste(cond1_name,as.character(states1),collapse =  '_')
states1_names <- paste(states1, collapse = '_')
cond_states_1_name <- paste(cond1_name,states1_names,collapse =  '_')
cond_states_1_name
cond1_name
cond_states_1_name <- paste(c(cond1_name,states1_names),collapse =  '_')
cond_states_1_name
cond1_name <- unique(pd_1[,'timepoint'])
cond2_name <- unique(pd_2[,'timepoint'])
states1_names <- paste(states1, collapse = '_')
cond_states_1_name <- paste(c(cond1_name,states1_names),collapse =  '_')
states2_names <- paste(states2, collapse = '_')
cond_states_2_name <- paste(c(cond2_name,states2_names),collapse =  '_')
cond_states_2_name
#extracting condition-state info as string
cond1_name <- unique(pd_1[,'timepoint'])
cond2_name <- unique(pd_2[,'timepoint'])
states1_names <- paste(states1, collapse = '_')
cond_states_1_name <- paste(c(cond1_name,states1_names),collapse =  '_')
states2_names <- paste(states2, collapse = '_')
cond_states_2_name <- paste(c(cond2_name,states2_names),collapse =  '_')
output_fname = paste(c('difftest'),cond_states_1_name, collapse = '_')
output_fname = paste(c(output_fname,cond_states_2_name), collapse = '_')
output_fname
output_fname = paste(c('difftest',cond_states_1_name), collapse = '_')
output_fname = paste(c(output_fname,cond_states_2_name), collapse = '_')
output_fname
output_fname = paste(c('difftest',cond_states_1_name), collapse = '_')
output_fname = paste(c(output_fname,cond_states_2_name), collapse = '_')
output_fname = paste(c(output_fname,".csv"), collapse = '')
output_fname
output_fname_base = paste(c('difftest',cond_states_1_name), collapse = '_')
output_fname_base = paste(c(output_fname_base,cond_states_2_name), collapse = '_')
source("https://bioconductor.org/biocLite.R")
biocLite("InterMineR")
require('InterMineR')
biocLite("InterMineR")
biocLite("BiocUpgrade")
source("https://bioconductor.org/biocLite.R")
biocLite("InterMineR")
?plot_cell_trajectory
?
plot_cell_trajectory
?plot_cell_trajectory
require('InterMineR')
library('InterMineR')
?plot_cell_trajectory
?plot_cell_trajectory
?plot_cell_trajectory
?plot_cell_trajectory
?coord_flip
plot_cell_trajectory(dCellData_inlag1h,color_by = 'State', cell_size = 0.8)+ scale_color_brewer(palette="Paired")
plot_cell_trajectory(dCellData_inlag1h,color_by = 'Pseudotime', cell_size = 0.8)
plot_cell_trajectory(dCellData_inlag3h,color_by = 'Pseudotime', cell_size = 0.8)
plot_cell_trajectory(dCellData_inlag3h,use_color_gradient = TRUE, markers = 'CIT1', cell_size = 0.8)+ scale_color_brewer(palette="Paired")
plot_cell_trajectory(dCellData_inlag3h, markers = 'CIT1', cell_size = 0.8)
plot_cell_trajectory(dCellData_inlag3h, markers = 'CIT1', use_color_gradient = TRUE,cell_size = 0.8)
plot_cell_trajectory(dCellData_inlag3h, markers = 'CIT1', use_color_gradient = TRUE,cell_size = 0.8)
biocLite("monocle")
library("monocle")
plot_cell_trajectory(dCellData_inlag3h, markers = 'CIT1', use_color_gradient = TRUE,cell_size = 0.8)
plot_cell_trajectory
?plot_cell_trajectory
plot_cell_trajectory(dCellData_inlag3h, markers = 'CIT1', cell_size = 0.8)
plot_cell_trajectory(dCellData_inlag3h,color_by = 'State', cell_size = 0.8)+ scale_color_brewer(palette="Paired")
plot_cell_trajectory(dCellData_inlag3h,color_by = 'Pseudotime', cell_size = 0.8)
plot_cell_trajectory(dCellData_inlag3h, markers = 'MAL63', cell_size = 0.8)
library(devtools)
install_github("cole-trapnell-lab/monocle-release")
library(githubinstall)
install.packages("githubinstall")
library(devtools)
library(githubinstall)
install_github("cole-trapnell-lab/monocle-release")
install_github("cole-trapnell-lab/monocle-release")
libarry(monocle)
library('monocle')
library('monocle')
install_github("cole-trapnell-lab/monocle-release")
library('monocle')
biocLite("ggcyto")
source("https://bioconductor.org/biocLite.R")
biocLite("ggcyto")
biocLite("RProtoBufLib")
source("https://bioconductor.org/biocLite.R")
biocLite("ggcyto")
library(seqinr)
options(warn=-1)
#Adjust the path below accordingly, This should end with a slash
input_fasta_dir = '/media/abbas/Extension_3TB/santa/180216_hardsoft_seqs_forCluster/sample_broken_fa_per_generation/'
#cur_fa_path <- args[1]
cur_gen <- args[1]
cur_cond <- args[2]
#cur_gen <- '50'
#cur_cond = 'soft'
#This will be a list of all fasta files for all replicates at the given generation & condition
filenames <- Sys.glob(paste0(input_fasta_dir,cur_cond,'*','_gen',cur_gen,'.fa'))
iter1 = TRUE
out_df = -1
for (cur_fa_path in filenames){
cur_fa_data <- read.alignment(cur_fa_path, format = "fasta")
mat <- dist.alignment(cur_fa_data, matrix = "similarity")
mat <- (as.matrix(mat))
#for some reason this package gets the square root of identity
matsq <- mat^2
#cur_mean_pwd <- mean(matsq[row(matsq)!=col(matsq)])
cur_f_n <- basename(cur_fa_path)
#cur_cond <- strsplit(cur_f_n,'_')[[1]][1]
cur_rep <- strsplit(cur_f_n,'_')[[1]][2]
cur_rep <- substr(cur_rep,4,nchar(cur_rep))
#cur_gen <- strsplit(cur_f_n,'_')[[1]][3]
#cur_gen <- strsplit(cur_gen,'\\.')[[1]][1]
if (!iter1){
out_df <- rbind(out_df,data.frame(cur_rep,cur_mean_pwd))
}
if (iter1){
iter1 = FALSE
out_df <- data.frame(cur_rep,cur_mean_pwd)
}
}
cur_gen <- '50'
cur_cond = 'soft'
filenames <- Sys.glob(paste0(input_fasta_dir,cur_cond,'*','_gen',cur_gen,'.fa'))
iter1 = TRUE
out_df = -1
for (cur_fa_path in filenames){
cur_fa_data <- read.alignment(cur_fa_path, format = "fasta")
mat <- dist.alignment(cur_fa_data, matrix = "similarity")
mat <- (as.matrix(mat))
#for some reason this package gets the square root of identity
matsq <- mat^2
#cur_mean_pwd <- mean(matsq[row(matsq)!=col(matsq)])
cur_f_n <- basename(cur_fa_path)
#cur_cond <- strsplit(cur_f_n,'_')[[1]][1]
cur_rep <- strsplit(cur_f_n,'_')[[1]][2]
cur_rep <- substr(cur_rep,4,nchar(cur_rep))
#cur_gen <- strsplit(cur_f_n,'_')[[1]][3]
#cur_gen <- strsplit(cur_gen,'\\.')[[1]][1]
if (!iter1){
out_df <- rbind(out_df,data.frame(cur_rep,cur_mean_pwd))
}
if (iter1){
iter1 = FALSE
out_df <- data.frame(cur_rep,cur_mean_pwd)
}
}
#out file pattern:
cur_mean_pwd
cur_mean_pwd
matsq
lower.tri(matsq, diag = FALSE)
class(lower.tri(matsq, diag = FALSE))
dim(lower.tri(matsq, diag = FALSE))
matsq[lower.tri(matsq, diag = FALSE)]
dim(matsq[lower.tri(matsq, diag = FALSE)])
class(matsq[lower.tri(matsq, diag = FALSE)])
cur_pw_distances <-matsq[lower.tri(matsq, diag = FALSE)]
data.frame(cur_rep,cur_mean_pwd)
cur_pw_distances <-matsq[lower.tri(matsq, diag = FALSE)]
data.frame(cur_rep,cur_mean_pwd)
data.frame(cur_pw_distances)
cur_pw_dist_df <- data.frame(cur_pw_distances)
head(cur_pw_dist_df)
cur_fa_path
cur_f_n <- basename(cur_fa_path)
cur_cond <- strsplit(cur_f_n,'_')[[1]][1]
cur_rep <- strsplit(cur_f_n,'_')[[1]][2]
cur_rep <- substr(cur_rep,4,nchar(cur_rep))
cur_gen <- strsplit(cur_f_n,'_')[[1]][3]
cur_gen <- strsplit(cur_gen,'\\.')[[1]][1]
cur_gen
cur_rep
cur_f_n <- basename(cur_fa_path)
cur_cond <- strsplit(cur_f_n,'_')[[1]][1]
cur_rep <- strsplit(cur_f_n,'_')[[1]][2]
#cur_rep <- substr(cur_rep,4,nchar(cur_rep))
cur_gen <- strsplit(cur_f_n,'_')[[1]][3]
cur_gen <- strsplit(cur_gen,'\\.')[[1]][1]
cur_gen
cur_cond
cur_rep
cur_gen
paste0(cur_cond,'_',cur_rep,'_',cur_gen,'.fa.dist')
setwd("/media/abbas/Extension_3TB/180710_EEG_DeepL/greedy_search_channels_NN_180803/")
data_log_dir = "/media/abbas/Extension_3TB/180710_EEG_DeepL/greedy_search_channels_NN_180803/logs/"
library(dplyr)
library(readr)
multmerge = function(path){
filenames=list.files(path=path, full.names=TRUE)
rbindlist(lapply(filenames, fread))
}
multmerge(data_log_dir)
data_path_1 = "/media/abbas/Extension_3TB/180710_EEG_DeepL/greedy_search_channels_NN_180803/logs/Dog_3_greedy_NN_channel_search.log"
data_path_2 = "/media/abbas/Extension_3TB/180710_EEG_DeepL/greedy_search_channels_NN_180803/logs/Dog_4_greedy_NN_channel_search.log"
data_path_3 = "/media/abbas/Extension_3TB/180710_EEG_DeepL/greedy_search_channels_NN_180803/logs/Dog_5_greedy_NN_channel_search.log"
data_path_4 = "/media/abbas/Extension_3TB/180710_EEG_DeepL/greedy_search_channels_NN_180803/logs/greedy_NN_channel_search_Dog1_Dog2.log"
data_path_5 = "/media/abbas/Extension_3TB/180710_EEG_DeepL/greedy_search_channels_NN_180803/logs/Patient_1_greedy_NN_channel_search.log"
data_path_6 = "/media/abbas/Extension_3TB/180710_EEG_DeepL/greedy_search_channels_NN_180803/logs/Patient_2_greedy_NN_channel_search.log"
data_1 <- read.csv(data_path_1, sep =  ';')
data_1
data_1 <- read.csv(data_path_1, sep =  ';')
data_2 <- read.csv(data_path_2, sep =  ';')
data_3 <- read.csv(data_path_3, sep =  ';')
data_4 <- read.csv(data_path_4, sep =  ';')
data_5 <- read.csv(data_path_5, sep =  ';')
data_6 <- read.csv(data_path_6, sep =  ';')
data_7 <- read.csv(data_path_7, sep =  ';')
data_all <- rbind(data_1,data_2,data_3,data_4,data_5,data_6)
head(data_all)
str_count(data_all$channels, ","
str_count(data_all$channels, ",")
str_count(data_all$channels, ",")
library(stringr)
str_count(data_all$channels, ",")
data_all$n_channels <- str_count(data_all$channels, ",")
data_all[data_all$n_channels==0,]
data_all$n_channels <- str_count(data_all$channels, ",") + 1
library(ggplot2)
ggplot(data_all,aes(x=n_channels,y=auc_cross_val_mean,color=subject))+
geom_line()
ggplot(data_all,aes(x=n_channels,y=auc_cross_val_mean,color=subject))+
geom_line()+ theme_bw()
ggplot(data_all,aes(x=n_channels,y=auc_cross_val_mean,color=subject))+
geom_line()+ theme_bw()+
geom_errorbar(aes(ymin=auc_cross_val_mean-auc_cross_val_std, ymax=auc_cross_val_mean+auc_cross_val_std), colour=subject, width=.1)
ggplot(data_all,aes(x=n_channels,y=auc_cross_val_mean,color=subject))+
geom_line()+ theme_bw()+
geom_errorbar(aes(ymin=auc_cross_val_mean-auc_cross_val_std, ymax=auc_cross_val_mean+auc_cross_val_std, colour=subject), width=.1)
ggplot(data_all,aes(x=n_channels,y=auc_cross_val_mean,color=subject))+
geom_line()+ theme_bw()+
geom_errorbar(aes(ymin=auc_cross_val_mean-auc_cross_val_std, ymax=auc_cross_val_mean+auc_cross_val_std, colour=subject), width=.1) +
coord_cartesian(ylim=c(0.5,1))
ggplot(data_all,aes(x=n_channels,y=auc_cross_val_mean,color=subject))+
geom_line()+ theme_bw()+
geom_errorbar(aes(ymin=auc_cross_val_mean-auc_cross_val_std, ymax=auc_cross_val_mean+auc_cross_val_std, colour=subject), width=.1) +
coord_cartesian(ylim=c(0.5,1))+
scale_color_brewer(palette="Dark2")
ggplot(data_all,aes(x=n_channels,y=auc_cross_val_mean,color=subject))+
geom_line()+ theme_bw()+geom_point()+
geom_errorbar(aes(ymin=auc_cross_val_mean-auc_cross_val_std, ymax=auc_cross_val_mean+auc_cross_val_std, colour=subject), width=.1) +
coord_cartesian(ylim=c(0.5,1))+
scale_color_brewer(palette="Dark2")
ggsave("greedy_search_res.png",dpi = 400, width = 5, height = 4)
